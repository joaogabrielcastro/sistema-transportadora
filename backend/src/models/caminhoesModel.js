// backend/src/models/caminhoesModel.js
import { supabase } from "../config/supabase.js";

export const caminhoesModel = {
  // Verificar se carreta/cavalo j√° existem
  checkCarretaCavaloExists: async (numero_carreta_1, numero_carreta_2, numero_cavalo) => {
    console.log('üîé EXECUTANDO VALIDA√á√ÉO - Par√¢metros:', {
      numero_carreta_1,
      numero_carreta_2, 
      numero_cavalo
    });

    let conditions = [];
    
    if (numero_carreta_1 && numero_carreta_1 !== '') {
      conditions.push(`numero_carreta_1.eq.${numero_carreta_1}`);
      conditions.push(`numero_carreta_2.eq.${numero_carreta_1}`);
    }

    if (numero_carreta_2 && numero_carreta_2 !== '') {
      conditions.push(`numero_carreta_1.eq.${numero_carreta_2}`);
      conditions.push(`numero_carreta_2.eq.${numero_carreta_2}`);
    }

    if (numero_cavalo && numero_cavalo !== '') {
      conditions.push(`numero_cavalo.eq.${numero_cavalo}`);
    }

    console.log('üîÑ Condi√ß√µes da query:', conditions);

    if (conditions.length === 0) {
      console.log('‚û°Ô∏è Nenhuma condi√ß√£o - retornando array vazio');
      return [];
    }

    const query = supabase
      .from("caminhoes")
      .select("placa, numero_carreta_1, numero_carreta_2, numero_cavalo")
      .or(conditions.join(','));

    console.log('üì° Executando query no Supabase...');
    const { data, error } = await query;

    if (error) {
      console.log('‚ùå Erro na query:', error);
      throw error;
    }

    console.log('‚úÖ Resultado da query:', data);
    return data || [];
  },

  // L√≥gica para criar um caminh√£o com valida√ß√£o de duplica√ß√£o
  create: async (caminhaoData) => {
    console.log('üö® INICIANDO CREATE - Dados recebidos:', caminhaoData);
    
    const { numero_carreta_1, numero_carreta_2, numero_cavalo } = caminhaoData;
    console.log('üîç Valores para valida√ß√£o:', { 
      numero_carreta_1, 
      numero_carreta_2, 
      numero_cavalo 
    });

    // Verificar se j√° existem carretas/cavalo com esses n√∫meros
    console.log('üìû Chamando checkCarretaCavaloExists...');
    const existentes = await caminhoesModel.checkCarretaCavaloExists(
      numero_carreta_1, 
      numero_carreta_2, 
      numero_cavalo
    );

    console.log('üìä Registros existentes encontrados:', existentes);

    if (existentes.length > 0) {
      console.log('‚ùå CONFLITO ENCONTRADO - Gerando erros...');
      const erros = [];
      
      existentes.forEach(item => {
        if (item.numero_carreta_1 == numero_carreta_1 && numero_carreta_1 && numero_carreta_1 !== '') {
          erros.push(`Carreta 1 (${numero_carreta_1}) j√° est√° em uso no caminh√£o ${item.placa}`);
        }
        if (item.numero_carreta_2 == numero_carreta_1 && numero_carreta_1 && numero_carreta_1 !== '') {
          erros.push(`Carreta 1 (${numero_carreta_1}) j√° est√° cadastrada como Carreta 2 no caminh√£o ${item.placa}`);
        }
        if (item.numero_carreta_1 == numero_carreta_2 && numero_carreta_2 && numero_carreta_2 !== '') {
          erros.push(`Carreta 2 (${numero_carreta_2}) j√° est√° cadastrada como Carreta 1 no caminh√£o ${item.placa}`);
        }
        if (item.numero_carreta_2 == numero_carreta_2 && numero_carreta_2 && numero_carreta_2 !== '') {
          erros.push(`Carreta 2 (${numero_carreta_2}) j√° est√° em uso no caminh√£o ${item.placa}`);
        }
        if (item.numero_cavalo == numero_cavalo && numero_cavalo && numero_cavalo !== '') {
          erros.push(`Cavalo (${numero_cavalo}) j√° est√° em uso no caminh√£o ${item.placa}`);
        }
      });

      console.log('üö´ Erros gerados:', erros);
      
      if (erros.length > 0) {
        throw new Error(erros.join('; '));
      }
    } else {
      console.log('‚úÖ Nenhum conflito encontrado - Prosseguindo com inser√ß√£o...');
    }

    // Se n√£o houver conflitos, inserir normalmente
    console.log('üíæ Inserindo no banco...');
    const { data, error } = await supabase
      .from("caminhoes")
      .insert([caminhaoData])
      .select();

    if (error) {
      console.log('üí• Erro na inser√ß√£o:', error);
      throw error;
    }

    console.log('üéâ Inser√ß√£o realizada com sucesso:', data[0]);
    return data[0];
  },

  // L√≥gica para buscar todos os caminh√µes
  getAll: async () => {
    const { data, error } = await supabase
      .from("caminhoes")
      .select("*")
      .order("placa");
    if (error) throw error;
    return data;
  },

  // L√≥gica para buscar um caminh√£o por placa
  getByPlaca: async (placa) => {
    const { data, error } = await supabase
      .from("caminhoes")
      .select("*")
      .eq("placa", placa)
      .maybeSingle();
    if (error) throw error;
    return data;
  },

  // L√≥gica para atualizar um caminh√£o por placa com valida√ß√£o
  update: async (placa, caminhaoData) => {
    console.log('üîÑ INICIANDO UPDATE - Placa:', placa, 'Dados:', caminhaoData);
    
    const { numero_carreta_1, numero_carreta_2, numero_cavalo } = caminhaoData;

    // Verificar conflitos (excluindo o pr√≥prio registro)
    const existentes = await caminhoesModel.checkCarretaCavaloExists(
      numero_carreta_1, 
      numero_carreta_2, 
      numero_cavalo
    );

    // Filtrar para remover o pr√≥prio caminh√£o da verifica√ß√£o
    const conflitos = existentes.filter(item => item.placa !== placa);

    if (conflitos.length > 0) {
      console.log('‚ùå CONFLITO ENCONTRADO NO UPDATE');
      const erros = [];
      
      conflitos.forEach(item => {
        if (item.numero_carreta_1 == numero_carreta_1 && numero_carreta_1 && numero_carreta_1 !== '') {
          erros.push(`Carreta 1 (${numero_carreta_1}) j√° est√° em uso no caminh√£o ${item.placa}`);
        }
        if (item.numero_carreta_2 == numero_carreta_1 && numero_carreta_1 && numero_carreta_1 !== '') {
          erros.push(`Carreta 1 (${numero_carreta_1}) j√° est√° cadastrada como Carreta 2 no caminh√£o ${item.placa}`);
        }
        if (item.numero_carreta_1 == numero_carreta_2 && numero_carreta_2 && numero_carreta_2 !== '') {
          erros.push(`Carreta 2 (${numero_carreta_2}) j√° est√° cadastrada como Carreta 1 no caminh√£o ${item.placa}`);
        }
        if (item.numero_carreta_2 == numero_carreta_2 && numero_carreta_2 && numero_carreta_2 !== '') {
          erros.push(`Carreta 2 (${numero_carreta_2}) j√° est√° em uso no caminh√£o ${item.placa}`);
        }
        if (item.numero_cavalo == numero_cavalo && numero_cavalo && numero_cavalo !== '') {
          erros.push(`Cavalo (${numero_cavalo}) j√° est√° em uso no caminh√£o ${item.placa}`);
        }
      });

      if (erros.length > 0) {
        throw new Error(erros.join('; '));
      }
    }

    const { data, error } = await supabase
      .from("caminhoes")
      .update(caminhaoData)
      .eq("placa", placa)
      .select();

    if (error) throw error;
    return data[0];
  },

  updateById: async (id, caminhaoData) => {
    const { data, error } = await supabase
      .from("caminhoes")
      .update(caminhaoData)
      .eq("id", id)
      .select();

    if (error) throw error;
    return data[0];
  },

  // Verificar depend√™ncias antes de excluir
  checkDependencies: async (placa) => {
    try {
      // Buscar o caminh√£o pelo ID (precisamos do ID para as rela√ß√µes)
      const { data: caminhao, error: caminhaoError } = await supabase
        .from("caminhoes")
        .select("id")
        .eq("placa", placa)
        .maybeSingle();

      if (caminhaoError) throw caminhaoError;
      if (!caminhao) throw new Error("Caminh√£o n√£o encontrado");

      const caminhaoId = caminhao.id;

      // Verificar em cada tabela relacionada
      const [gastosResult, checklistsResult, pneusResult] = await Promise.all([
        supabase.from("gastos").select("id").eq("caminhao_id", caminhaoId),
        supabase.from("checklist").select("id").eq("caminhao_id", caminhaoId),
        supabase.from("pneus").select("id").eq("caminhao_id", caminhaoId)
      ]);

      const dependencias = {
        detalhes: {
          gastos: gastosResult.data?.length || 0,
          checklists: checklistsResult.data?.length || 0,
          pneus: pneusResult.data?.length || 0
        },
        total: (gastosResult.data?.length || 0) + 
               (checklistsResult.data?.length || 0) + 
               (pneusResult.data?.length || 0)
      };

      return dependencias;
    } catch (error) {
      console.error("Erro ao verificar depend√™ncias:", error);
      throw error;
    }
  },

  // L√≥gica para deletar um caminh√£o por placa
  delete: async (placa) => {
    try {
      console.log("=== INICIANDO DELETE ===");
      console.log("Placa recebida:", placa);

      // Verificar se o caminh√£o existe antes de tentar deletar
      const { data: caminhaoExistente, error: errorBusca } = await supabase
        .from("caminhoes")
        .select("*")
        .eq("placa", placa)
        .maybeSingle();

      console.log("Resultado da busca:", { caminhaoExistente, errorBusca });

      if (errorBusca) {
        console.error("Erro ao buscar caminh√£o:", errorBusca);
        throw new Error("Erro ao buscar caminh√£o: " + errorBusca.message);
      }

      if (!caminhaoExistente) {
        console.log("Caminh√£o n√£o encontrado");
        throw new Error("Caminh√£o n√£o encontrado");
      }

      console.log("Caminh√£o encontrado, tentando deletar...");

      // Tentar deletar
      const { data, error } = await supabase
        .from("caminhoes")
        .delete()
        .eq("placa", placa);

      console.log("Resultado do delete:", { data, error });

      if (error) {
        console.error("Erro detalhado do Supabase:", {
          message: error.message,
          details: error.details,
          hint: error.hint,
          code: error.code,
        });

        // Verificar se √© erro de foreign key
        if (
          error.code === "23503" ||
          error.message.includes("foreign key") ||
          error.message.includes("violates")
        ) {
          throw new Error(
            "N√£o √© poss√≠vel excluir o caminh√£o pois existem registros vinculados (gastos, checklists ou pneus). " +
              "Exclua primeiro todos os registros relacionados ou use a op√ß√£o de exclus√£o em cascata."
          );
        }

        throw new Error("Erro ao deletar caminh√£o: " + error.message);
      }

      console.log("=== DELETE CONCLU√çDO COM SUCESSO ===");
      return data;
    } catch (error) {
      console.error("=== ERRO NA FUN√á√ÉO DELETE ===");
      console.error("Tipo do erro:", typeof error);
      console.error("Nome do erro:", error.name);
      console.error("Mensagem do erro:", error.message);
      console.error("Stack trace:", error.stack);
      throw error;
    }
  },

  

  // Fun√ß√£o para deletar caminh√£o com todos os registros relacionados (CASCADE)
  deleteWithCascade: async (placa) => {
    try {
      console.log("Iniciando delete com cascata para placa:", placa);

      // Primeiro, buscar o ID do caminh√£o pela placa
      const { data: caminhao, error: caminhaoError } = await supabase
        .from("caminhoes")
        .select("id")
        .eq("placa", placa)
        .maybeSingle();

      if (caminhaoError) {
        console.error("Erro ao buscar caminh√£o:", caminhaoError);
        throw new Error("Erro ao buscar caminh√£o: " + caminhaoError.message);
      }

      if (!caminhao) {
        throw new Error("Caminh√£o n√£o encontrado");
      }

      const caminhaoId = caminhao.id;
      console.log("ID do caminh√£o encontrado:", caminhaoId);

      // Deletar registros relacionados um por vez para melhor controle de erro
      try {
        console.log("Deletando gastos...");
        await supabase.from("gastos").delete().eq("caminhao_id", caminhaoId);

        console.log("Deletando checklists...");
        await supabase.from("checklist").delete().eq("caminhao_id", caminhaoId);

        console.log("Deletando pneus...");
        await supabase.from("pneus").delete().eq("caminhao_id", caminhaoId);
      } catch (relatedError) {
        console.error("Erro ao deletar registros relacionados:", relatedError);
        // Continua mesmo com erro nos relacionados
      }

      // Finalmente, deletar o caminh√£o
      console.log("Deletando caminh√£o...");
      const { data, error } = await supabase
        .from("caminhoes")
        .delete()
        .eq("placa", placa);

      if (error) {
        console.error("Erro ao deletar caminh√£o:", error);
        throw new Error("Erro ao deletar caminh√£o: " + error.message);
      }

      console.log("Caminh√£o e registros relacionados deletados com sucesso");
      return data;
    } catch (error) {
      console.error("Erro na fun√ß√£o deleteWithCascade:", error);
      throw error;
    }
  },
};